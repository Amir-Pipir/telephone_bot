from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
import excel_work
from aiogram.dispatcher.filters import Text
from create_bot import TOKEN
from keyboard import admin_kb
from aiogram.dispatcher import FSMContext


class Lock(StatesGroup):
    us_id = State()


class Unlock(StatesGroup):
    us_id = State()


async def admin(message: types.Message):
    x = await excel_work.find_us(message.from_user.id)
    await excel_work.admin(x[1])
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –∞–¥–º–∏–Ω–∞!", reply_markup=admin_kb)


async def lock_us_id(message: types.Message):
    if await excel_work.check_for_admin(message.from_user.id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ id —é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
        await Lock.us_id.set()
    else:
        await message.answer("–¢—ã –Ω–µ –∞–¥–º–∏–Ω!")


async def lock_us(message: types.Message, state: FSMContext):
    us_id = message.text
    if str(us_id) == str(message.from_user.id):
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è)")
        await state.finish()
    else:
        x = await excel_work.lock_unlock(str(us_id), '–ó–∞–±–ª–æ–∫')
        if x is not False:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {x} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            await state.finish()
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {us_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.finish()


async def unlock_us_id(message: types.Message):
    if await excel_work.check_for_admin(message.from_user.id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ id —é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
        await Unlock.us_id.set()
    else:
        await message.answer("–¢—ã –Ω–µ –∞–¥–º–∏–Ω!")


async def unlock_us(message: types.Message, state: FSMContext):
    us_id = message.text
    if str(us_id) == str(message.from_user.id):
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è)")
        await state.finish()
    else:
        x = await excel_work.lock_unlock(str(us_id), '–†–∞–∑–±–ª–æ–∫')
        if x is not False:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {x} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            await state.finish()
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {us_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.finish()


async def send_excel_file(message: types.Message):
    if await excel_work.check_for_admin(message.from_user.id):
        await message.answer(f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Å–µ–≥–æ {await excel_work.users_rows()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n–ü–æ–¥—Ä–æ–±–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—Ç—Ä–µ—Ç—å –≤ —Ñ–∞–π–ª–µ –Ω–∏–∂–µ")
        with open('–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.xlsx', 'rb') as file:
            await message.answer_document(file)
    else:
        await message.answer("–¢—ã –Ω–µ –∞–¥–º–∏–Ω!")


async def state_cansel(message: types.Message, state: FSMContext):
    cur_state = state.get_state()
    if cur_state is None:
        return
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


def register_handler_admin(dp: Dispatcher):
    dp.register_message_handler(state_cansel, state="*", commands="stop")
    dp.register_message_handler(state_cansel, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dp.register_message_handler(admin, Text(TOKEN))
    dp.register_message_handler(lock_us_id, Text("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å‚ùå"))
    dp.register_message_handler(lock_us, state=Lock.us_id)
    dp.register_message_handler(unlock_us_id, Text("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—åüîì"))
    dp.register_message_handler(unlock_us, state=Unlock.us_id)
    dp.register_message_handler(send_excel_file, Text("–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüì±"))
